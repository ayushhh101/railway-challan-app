openapi: 3.0.0
info:
  title: Railway Challan API
  version: 1.0.0
servers:
  - url: http://localhost:5000
paths:
  # Auth Routes
  /register:
    post:
      summary: Register a new user (Admin only)
      description: Allows an admin to register a new user. Requires JWT authentication and admin privileges.
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - role
                - zone
              properties:
                username:
                  type: string
                  example: "admin"
                password:
                  type: string
                  format: password
                  example: "password123"
                role:
                  type: string
                  enum: [admin, tc, passenger]
                  example: "admin"
                zone:
                  type: string
                  example: "North"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /login:
    post:
      summary: Login user
      description: Authenticates a user and returns JWT tokens.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "admin or TC"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "<jwt-access-token>"
                  refreshToken:
                    type: string
                    example: "<jwt-refresh-token>"
        '400':
          description: Bad request
        '401':
          description: Invalid credentials

  /refresh:
    post:
      summary: Refresh authentication token
      description: Returns a new access token using a valid refresh token.
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "<jwt-refresh-token>"
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "<new-jwt-access-token>"
        '400':
          description: Bad request
        '401':
          description: Invalid or expired refresh token

  /logout:
    post:
      summary: Logout user
      description: Logs out the user and invalidates the refresh token.
      tags: [Auth]
      requestBody:
        required: false
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        '401':
          description: Unauthorized

# Admin Routes
  /admin/dashboard:
    get:
      summary: Get admin dashboard statistics
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard stats
          content:
            application/json:
              example:
                stats: { totalChallans: 1200, totalUsers: 300 }
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin/anomalies:
    get:
      summary: List all anomalies
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of anomalies
          content:
            application/json:
              example:
                anomalies: [ { _id: "abc123", user: { name: "TC Ram" }, challan: { reason: "No ticket" } } ]
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin/anomalies/{anomalyId}/{status}:
    put:
      summary: Update anomaly status
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: anomalyId
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              example:
                message: "Anomaly updated"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin/getAllAudits:
    get:
      summary: Get audit logs
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Audit log array
          content:
            application/json:
              example:
                audits: [ { action: "reset-password", user: "admin" } ]
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin/monthly-report:
    get:
      summary: Get monthly report
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Monthly report data
          content:
            application/json:
              example:
                report: { month: "September", totalChallans: 100 }
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin/getTCAnalytics:
    get:
      summary: Get TC analytics
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: TC analytics data
          content:
            application/json:
              example:
                analytics: [ { TC: "Ram", challans: 50 } ]
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin/reset-password:
    post:
      summary: Admin resets user password
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            example:
              userId: "TC1"
              newPassword: "newSecurePassword"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              example:
                message: "Password reset successful"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          
# Challan Routes
  /challan/admin/all:
    get:
      summary: View all challans (Admin only)
      description: Retrieve all challans in the system. Requires JWT authentication and admin privileges.
      tags: [Challan]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of all challans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challan'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /challan/my:
    get:
      summary: View my challans (TC only)
      description: Retrieve challans issued by the logged-in TC. Requires JWT authentication and TC role.
      tags: [Challan]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of TC's challans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challan'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /challan/issue:
    post:
      summary: Issue a new challan (TC only)
      description: Allows a TC to issue a new challan. Requires JWT authentication, TC role, and proof file upload.
      tags: [Challan]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                passengerId:
                  type: string
                offense:
                  type: string
                amount:
                  type: number
                proofs:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Challan issued successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challan'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /challan/locations:
    get:
      summary: Get challan locations (Admin only)
      description: Retrieve locations where challans have been issued. Requires JWT authentication and admin privileges.
      tags: [Challan]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /challan/search:
    get:
      summary: Search challans (Admin only)
      description: Search for challans based on query parameters. Requires JWT authentication and admin privileges.
      tags: [Challan]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: passengerId
          schema:
            type: string
          required: false
        - in: query
          name: status
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Array of matching challans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challan'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /challan/details/{id}:
    get:
      summary: Get challan details by ID (Admin only)
      description: Retrieve details of a specific challan by its ID. Requires JWT authentication and admin privileges.
      tags: [Challan]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Challan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challan'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /challan/bulk-pdf:
    post:
      summary: Download bulk challan PDF (Admin only)
      description: Download PDFs for multiple challans. Requires JWT authentication and admin privileges.
      tags: [Challan]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challanIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: PDF file (binary)
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /challan/passenger-history:
    get:
      summary: Get passenger history
      description: Retrieve the history of challans for a passenger. Requires JWT authentication.
      tags: [Challan]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of passenger's challans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challan'
        '401':
          description: Unauthorized

  /challan/{id}:
    get:
      summary: Get challan by ID
      description: Retrieve a challan by its ID.
      tags: [Challan]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Challan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challan'
        '404':
          description: Challan not found

    put:
      summary: Update challan (TC only)
      description: Update details of a challan. Requires JWT authentication and TC role.
      tags: [Challan]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challan'
      responses:
        '200':
          description: Challan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challan'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /challan/history:
    get:
      summary: Get user history
      description: Retrieve the history of challans for all user.
      tags: [Challan]
      responses:
        '200':
          description: Array of user's challans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challan'

  /challan/pay/{id}:
    put:
      summary: Mark challan as paid
      description: Mark a challan as paid by its ID.
      tags: [Challan]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Challan marked as paid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challan'
        '400':
          description: Bad request
        '404':
          description: Challan not found

# Passenger Routes
  /passenger/onboard-verify:
    get:
      summary: Verify onboarding token
      description: Returns passenger info if onboarding token is valid.
      tags: [Passenger]
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Passenger info
          content:
            application/json:
              schema:
                type: object
                properties:
                  passengerId:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
        '400':
          description: Invalid or expired token

  /passenger/onboard-setpassword:
    post:
      summary: Set password and complete onboarding
      description: Sets password and completes onboarding for a passenger.
      tags: [Passenger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Onboarding completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Onboarding completed"
        '400':
          description: Invalid token or password

  /passenger/login:
    post:
      summary: Passenger login
      description: Authenticates a passenger and returns JWT tokens.
      tags: [Passenger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Bad request
        '401':
          description: Invalid credentials

  /passenger/refresh:
    post:
      summary: Refresh passenger authentication token
      description: Returns a new access token using a valid refresh token for passenger.
      tags: [Passenger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '400':
          description: Bad request
        '401':
          description: Invalid or expired refresh token

  /passenger/logout:
    post:
      summary: Passenger logout
      description: Logs out the passenger and invalidates the refresh token.
      tags: [Passenger]
      requestBody:
        required: false
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        '401':
          description: Unauthorized

  /passenger/mychallans:
    get:
      summary: Get my challans (Passenger)
      description: Retrieve challans for the logged-in passenger. Requires JWT authentication.
      tags: [Passenger]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of passenger's challans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challan'
        '401':
          description: Unauthorized
        # PDF Routes
    /pdf/challan/{id}/pdf:
      get:
        summary: Download challan PDF
        description: Download the PDF for a specific challan by its ID. Requires JWT authentication.
        tags: [PDF]
        security:
          - bearerAuth: []
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
            description: Challan ID
        responses:
          '200':
            description: PDF file (binary)
            content:
              application/pdf:
                schema:
                  type: string
                  format: binary
          '401':
            description: Unauthorized
          '404':
            description: Challan not found

# Proof Routes
  /proof/upload-proof:
      post:
        summary: Upload proof file ( TC only )
        description: Upload a proof image or document. Requires JWT authentication.
        tags: [Proof]
        security:
          - bearerAuth: []
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  proof:
                    type: string
                    format: binary
        responses:
          '200':
            description: Proof uploaded successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Uploaded successfully"
                    fileUrl:
                      type: string
                      example: "/proofs/filename.jpg"
          '400':
            description: No file uploaded
          '401':
            description: Unauthorized

 # TC Routes
  /TC/TCProfile:
      get:
        summary: Get TC profile information
        description: Retrieve the profile information for the logged-in TC. Requires JWT authentication and TC role.
        tags: [TC]
        security:
          - bearerAuth: []
        responses:
          '200':
            description: TC profile information
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    TCId:
                      type: string
                    name:
                      type: string
                    email:
                      type: string
                    stats:
                      type: object
                      description: TC statistics (optional)
          '401':
            description: Unauthorized
          '403':
            description: Forbidden
            
# ...existing code...
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - name
        - employeeId
        - password
        - role
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Amit Kumar"
        employeeId:
          type: string
          example: "TC12345"
        email:
          type: string
          format: email
          example: "amit.kumar@railway.gov.in"
        password:
          type: string
          format: password
        phone:
          type: string
          example: "+919876543210"
        profilePic:
          type: string
          example: "/uploads/profilepic.jpg"
        role:
          type: string
          enum: [TC, admin]
          example: "TC"
        zone:
          type: string
          example: "Central"
        currentStation:
          type: string
          example: "Mumbai CST"
        designation:
          type: string
          example: "Senior TC"
        dateOfJoining:
          type: string
          format: date
          example: "2020-01-15"
        lastLogin:
          type: string
          format: date-time
          example: "2023-09-24T10:30:00Z"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Passenger:
      type: object
      required:
        - name
        - aadharLast4
        - mobileNumber
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439013"
        name:
          type: string
          example: "Ravi Sharma"
        aadharLast4:
          type: string
          paTCrn: "^[0-9]{4}$"
          example: "1234"
          description: "Last 4 digits of Aadhar number"
        mobileNumber:
          type: string
          example: "+919812345678"
        passwordHash:
          type: string
          description: "Hashed password"
        lastOnboardingTokenSent:
          type: string
          format: date-time
          description: "Timestamp when onboarding token was last sent"
        lastOnboardingToken:
          type: string
          description: "Last onboarding token sent to passenger"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    
      type: object
      required:
        - passengerId
        - TCId
        - offense
        - amount
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439012"
        passengerId:
          type: string
          example: "PASS123456"
        TCId:
          type: string
        offense:
          type: string
          example: "Traveling without valid ticket"
        amount:
          type: number
          minimum: 0
          example: 500
        status:
          type: string
          enum: [pending, paid, disputed]
          default: pending
        location:
          type: string
        proofs:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Challan:
      type: object
      required:
        - issuedBy
        - trainNumber
        - passengerName
        - reason
        - fineAmount
        - location
        - paymentMode
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439012"
        issuedBy:
          type: string
          description: "User ID of the TC who issued the challan"
          example: "507f1f77bcf86cd799439011"
        trainNumber:
          type: string
          example: "12345"
        coachNumber:
          type: string
          example: "S2"
        passengerName:
          type: string
          example: "Ravi Sharma"
        passengerAadharLast4:
          type: string
          paTCrn: "^[0-9]{4}$"
          example: "1234"
        mobileNumber:
          type: string
          example: "+919812345678"
        passenger:
          type: string
          description: "Passenger ID (reference)"
          example: "507f1f77bcf86cd799439013"
        reason:
          type: string
          enum:
            - Travelling without proper pass/ticket
            - Travelling Fraudulently
            - Alarm Chain Pulling
            - Coach Reserved for Handicapped
            - Travelling on Roof Top
            - Trespassing
            - Nuisance and LiTCring
            - Bill Pasting
            - Touting
            - Unauthorised Hawking
          example: "Travelling without proper pass/ticket"
        fineAmount:
          type: number
          example: 500
        location:
          type: string
          example: "New Delhi Railway Station"
        latitude:
          type: number
          format: double
          example: 28.6139
        longitude:
          type: number
          format: double
          example: 77.2090
        paymentMode:
          type: string
          enum: [online, offline]
          example: "online"
        paid:
          type: boolean
          default: false
          example: false
        signature:
          type: string
          example: "/uploads/signature.png"
        proofFiles:
          type: array
          items:
            type: string
            example: "/uploads/proof1.jpg"
        issuedAt:
          type: string
          format: date-time
          example: "2023-09-24T10:30:00Z"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Anomaly:
      type: object
      required:
        - message
        - status
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439015"
        message:
          type: string
          example: "Suspicious high amount for minor offense"
        user:
          type: string
          description: "Reference to User (TC) who created the anomaly"
          example: "507f1f77bcf86cd799439011"
        challan:
          type: string
          description: "Reference to the challan that has anomaly"
          example: "507f1f77bcf86cd799439012"
        status:
          type: string
          enum: [pending, resolved, dismissed]
          default: pending
          example: "pending"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Audit:
      type: object
      required:
        - action
        - performedBy
        - role
        - status
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439016"
        action:
          type: string
          example: "CHALLAN_ISSUED"
        performedBy:
          type: string
          description: "Reference to User who performed the action"
          example: "507f1f77bcf86cd799439011"
        role:
          type: string
          enum: [TC, admin, passenger]
          example: "TC"
        metadata:
          type: object
          additionalProperties: true
          description: "Additional details about the action"
        ipAddress:
          type: string
          example: "192.168.1.100"
        userAgent:
          type: string
          example: "Mozilla/5.0"
        severity:
          type: string
          enum: [low, medium, high, critical]
          default: low
          example: "low"
        status:
          type: string
          enum: [SUCCESS, FAILURE, PARTIAL]
          default: SUCCESS
          example: "SUCCESS"
        createdAt:
          type: string
          format: date-time

    Station:
      type: object
      required:
        - name
        - zone
        - latitude
        - longitude
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439017"
        name:
          type: string
          example: "New Delhi Railway Station"
        zone:
          type: string
          example: "Northern Railway"
        latitude:
          type: number
          format: double
          example: 28.6139
        longitude:
          type: number
          format: double
          example: 77.2090

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Invalid input data"
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
  
    